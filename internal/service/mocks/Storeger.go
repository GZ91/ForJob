// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Storeger is an autogenerated mock type for the Storeger type
type Storeger struct {
	mock.Mock
}

type Storeger_Expecter struct {
	mock *mock.Mock
}

func (_m *Storeger) EXPECT() *Storeger_Expecter {
	return &Storeger_Expecter{mock: &_m.Mock}
}

// AddURL provides a mock function with given fields: _a0
func (_m *Storeger) AddURL(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Storeger_AddURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddURL'
type Storeger_AddURL_Call struct {
	*mock.Call
}

// AddURL is a helper method to define mock.On call
//   - _a0 string
func (_e *Storeger_Expecter) AddURL(_a0 interface{}) *Storeger_AddURL_Call {
	return &Storeger_AddURL_Call{Call: _e.mock.On("AddURL", _a0)}
}

func (_c *Storeger_AddURL_Call) Run(run func(_a0 string)) *Storeger_AddURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storeger_AddURL_Call) Return(_a0 string) *Storeger_AddURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storeger_AddURL_Call) RunAndReturn(run func(string) string) *Storeger_AddURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetURL provides a mock function with given fields: _a0
func (_m *Storeger) GetURL(_a0 string) (string, bool) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Storeger_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type Storeger_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
//   - _a0 string
func (_e *Storeger_Expecter) GetURL(_a0 interface{}) *Storeger_GetURL_Call {
	return &Storeger_GetURL_Call{Call: _e.mock.On("GetURL", _a0)}
}

func (_c *Storeger_GetURL_Call) Run(run func(_a0 string)) *Storeger_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storeger_GetURL_Call) Return(_a0 string, _a1 bool) *Storeger_GetURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storeger_GetURL_Call) RunAndReturn(run func(string) (string, bool)) *Storeger_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStoreger interface {
	mock.TestingT
	Cleanup(func())
}

// NewStoreger creates a new instance of Storeger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStoreger(t mockConstructorTestingTNewStoreger) *Storeger {
	mock := &Storeger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
